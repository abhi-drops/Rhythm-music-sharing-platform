There are two primary methods to access a specific document you created in Firestore from another page:

1. Using Document ID:

Steps:

Retrieve the document ID: When you create a document using addDoc, it returns a DocumentReference object. You can access the document ID using the id property of this object. Store this ID in a variable or pass it as a parameter to the other page.
Construct a document reference: In your other page's code, import the necessary libraries (getFirestore from firebase/firestore) and use it to create a reference to the specific document. Here's an example:
JavaScript
import { getFirestore } from "firebase/firestore";

const db = getFirestore();

// Assuming you have the document ID stored in a variable called 'docId'
const docRef = doc(db, "songs", docId);
Use code with caution.
Access document data: Once you have the document reference, you can use methods like get or onSnapshot to retrieve or listen for changes to the document's data.
JavaScript
// Get document data once
const docSnap = await docRef.get();
const data = docSnap.data();

// Listen for changes to the document
docRef.onSnapshot((snapshot) => {
  const data = snapshot.data();
  // Update UI or perform actions based on the retrieved data
});
Use code with caution.
2. Using Queries:

Steps:

Define the query: If you need to access documents based on specific criteria (e.g., all documents with a particular genre), you can construct a query using the collection, where, and other operators provided by Firestore.
JavaScript
import { collection, where, query } from "firebase/firestore";

const db = getFirestore();

const genre = "pop"; // Assuming you want to access documents with genre "pop"

const q = query(collection(db, "songs"), where("genre", "==", genre));
Use code with caution.
Execute the query: Use the getDocs method on the constructed query to retrieve the matching documents.
JavaScript
const querySnapshot = await getDocs(q);
querySnapshot.forEach((doc) => {
  const data = doc.data();
  // Process data from each document
});
Use code with caution.
Choosing the method:

Use the document ID approach if you know the specific document you want to access.
Use queries if you need to retrieve documents based on specific criteria or want to listen for changes to a set of documents.
Additional Considerations:

Remember to implement proper error handling mechanisms when working with Firestore operations.
Make sure you have the necessary security rules in place to control access to your Firestore data.
By following these steps and considering the appropriate method based on your scenario, you can effectively access and manage documents in your Firestore database from different pages within your application.